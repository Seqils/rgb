{"ast":null,"code":"var _jsxFileName = \"/home/ndonkov/go/src/rgb/assets/src/components/Posts/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext, useEffect, useCallback } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport Errors from '../Errors/Errors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = props => {\n  _s();\n\n  const authContext = useContext(AuthContext);\n  const [titleValue, setTitleValue] = useState('');\n  const [contentValue, setContentValue] = useState('');\n  const [errors, setErrors] = useState({});\n  const populateFields = useCallback(() => {\n    if (props.post) {\n      setTitleValue(props.post.Title);\n      setContentValue(props.post.Content);\n    }\n  }, [props.post]);\n  useEffect(() => {\n    populateFields();\n  }, [populateFields]);\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setErrors({});\n\n    try {\n      const method = props.onEditPost ? 'PUT' : 'POST';\n      let body = {\n        Title: titleValue,\n        Content: contentValue\n      };\n\n      if (props.onEditPost) {\n        body.ID = props.post.ID;\n      }\n\n      const response = await fetch('api/posts', {\n        method: method,\n        body: JSON.stringify(body),\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + authContext.token\n        }\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        let errorText = 'Failed to add new post.';\n\n        if (!data.hasOwnProperty('error')) {\n          throw new Error(errorText);\n        }\n\n        if (typeof data['error'] === 'string') {\n          setErrors({\n            'unknown': data['error']\n          });\n        } else {\n          setErrors(data['error']);\n        }\n      } else {\n        setTitleValue('');\n        setContentValue('');\n\n        if (props.onAddPost) {\n          props.onAddPost(data.data);\n        }\n\n        if (props.onEditPost) {\n          props.onEditPost(data.data);\n        }\n      }\n    } catch (error) {\n      setErrors({\n        \"error\": error.message\n      });\n    }\n  }\n\n  ;\n\n  const titleChangeHandler = event => {\n    setTitleValue(event.target.value);\n  };\n\n  const contentChangeHandler = event => {\n    setContentValue(event.target.value);\n  };\n\n  const errorContent = Object.keys(errors).length === 0 ? null : Errors(errors);\n  const submitButtonText = props.onEditPost ? 'Update Post' : 'Add Post';\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container w-75 pb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group pb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"title\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"title\",\n            type: \"text\",\n            className: \"form-control\",\n            required: true,\n            value: titleValue,\n            onChange: titleChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group pb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"content\",\n            children: \"Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"content\",\n            className: \"form-control\",\n            rows: \"5\",\n            required: true,\n            value: contentValue,\n            onChange: contentChangeHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-success\",\n          children: submitButtonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), errorContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostForm, \"O1JQioHW2rCJC937ZM9baXKzI58=\");\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/home/ndonkov/go/src/rgb/assets/src/components/Posts/PostForm.js"],"names":["useState","useContext","useEffect","useCallback","AuthContext","Errors","PostForm","props","authContext","titleValue","setTitleValue","contentValue","setContentValue","errors","setErrors","populateFields","post","Title","Content","submitHandler","event","preventDefault","method","onEditPost","body","ID","response","fetch","JSON","stringify","headers","token","data","json","ok","errorText","hasOwnProperty","Error","onAddPost","error","message","titleChangeHandler","target","value","contentChangeHandler","errorContent","Object","keys","length","submitButtonText"],"mappings":"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","sourcesContent":["import { useState, useContext, useEffect, useCallback } from 'react';\n\nimport AuthContext from '../../store/auth-context';\nimport Errors from '../Errors/Errors';\n\nconst PostForm = (props) => {\n  const authContext = useContext(AuthContext);\n\n  const [titleValue, setTitleValue] = useState('');\n  const [contentValue, setContentValue] = useState('');\n\n  const [errors, setErrors] = useState({});\n\n  const populateFields = useCallback(() => {\n    if (props.post) {\n      setTitleValue(props.post.Title);\n      setContentValue(props.post.Content);\n    }\n  }, [props.post]);\n\n  useEffect(() => {\n    populateFields();\n  }, [populateFields]);\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    setErrors({});\n\n    try {\n      const method = props.onEditPost ? 'PUT' : 'POST';\n      let body = {\n        Title: titleValue,\n        Content: contentValue,\n      }\n      if (props.onEditPost) {\n        body.ID = props.post.ID;\n      }\n      const response = await fetch('api/posts',\n        {\n          method: method,\n          body: JSON.stringify(body),\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + authContext.token,\n          },\n        }\n      );\n      const data = await response.json();\n      if (!response.ok) {\n        let errorText = 'Failed to add new post.';\n        if (!data.hasOwnProperty('error')) {\n          throw new Error(errorText);\n        }\n        if ((typeof data['error'] === 'string')) {\n          setErrors({ 'unknown': data['error'] })\n        } else {\n          setErrors(data['error']);\n        }\n      } else {\n        setTitleValue('');\n        setContentValue('');\n        if (props.onAddPost) {\n          props.onAddPost(data.data);\n        }\n        if (props.onEditPost) {\n          props.onEditPost(data.data);\n        }\n      }\n    } catch (error) {\n      setErrors({ \"error\": error.message });\n    }\n  };\n\n  const titleChangeHandler = (event) => { setTitleValue(event.target.value) }\n  const contentChangeHandler = (event) => { setContentValue(event.target.value) }\n\n  const errorContent = Object.keys(errors).length === 0 ? null : Errors(errors);\n  const submitButtonText = props.onEditPost ? 'Update Post' : 'Add Post';\n\n  return (\n    <section>\n      <div className=\"container w-75 pb-4\">\n        <form onSubmit={submitHandler}>\n          <div className=\"form-group pb-3\">\n            <label htmlFor=\"title\">Title</label>\n            <input id=\"title\" type=\"text\" className=\"form-control\" required value={titleValue} onChange={titleChangeHandler}></input>\n          </div>\n          <div className=\"form-group pb-3\">\n            <label htmlFor=\"content\">Content</label>\n            <textarea id=\"content\" className=\"form-control\" rows=\"5\" required value={contentValue} onChange={contentChangeHandler}></textarea>\n          </div>\n          <button type=\"submit\" className=\"btn btn-success\">{submitButtonText}</button>\n        </form>\n        {errorContent}\n      </div>\n    </section>\n  );\n}\n\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}