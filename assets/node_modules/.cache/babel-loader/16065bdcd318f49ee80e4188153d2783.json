{"ast":null,"code":"var _jsxFileName = \"/home/ndonkov/snap/go/rgb/assets/src/components/Posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect, useCallback } from \"react\";\nimport AuthContext from \"../../store/auth-context\";\nimport Errors from \"../Errors/Errors\";\nimport PostForm from \"./PostForm\";\nimport PostsList from \"./PostsLists\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const authContext = useContext(AuthContext);\n  const [posts, setPosts] = useState([]);\n  const [errors, setErrors] = useState({});\n  const fetchPostsHandler = useCallback(async () => {\n    setErrors({});\n\n    try {\n      const response = await fetch('/api/posts', {\n        headers: {\n          'Authorization': 'Bearer ' + authContext.token\n        }\n      });\n      const data = await response.json();\n\n      if (!response.ok) {\n        let errorText = 'Fetching posts failed.';\n\n        if (!data.hasOwnProperty('error')) {\n          throw new Error(errorText);\n        }\n\n        if (typeof data['error'] === 'string') {\n          setErrors({\n            'unknown': data['error']\n          });\n        } else {\n          setErrors(data['error']);\n        }\n      } else {\n        setPosts(data.data);\n      }\n    } catch (error) {\n      setErrors({\n        \"error\": error.message\n      });\n    }\n  }, [authContext.token]);\n  useEffect(() => {\n    fetchPostsHandler();\n  }, [fetchPostsHandler]);\n\n  const addPostHandler = postData => {\n    setPosts(prevState => {\n      return [...prevState, postData];\n    });\n  };\n\n  const deletePostHandler = postID => {\n    setPosts(prevState => {\n      return prevState.filter(post => {\n        return post.ID !== postID;\n      });\n    });\n  };\n\n  const editPostHandler = () => {\n    fetchPostsHandler();\n  };\n\n  const postsContent = posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No posts yet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(PostsList, {\n    posts: posts,\n    onEditPost: editPostHandler,\n    onDeletePost: deletePostHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n  const errorContent = Object.keys(errors).length === 0 ? null : Errors(errors);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"pb-4\",\n      children: \"My posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      onAddPost: addPostHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), errorContent, postsContent]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"tDta7ur3JuQxmurxCo0GZqEzSxs=\");\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/ndonkov/snap/go/rgb/assets/src/components/Posts/Posts.js"],"names":["useContext","useState","useEffect","useCallback","AuthContext","Errors","PostForm","PostsList","Posts","authContext","posts","setPosts","errors","setErrors","fetchPostsHandler","response","fetch","headers","token","data","json","ok","errorText","hasOwnProperty","Error","error","message","addPostHandler","postData","prevState","deletePostHandler","postID","filter","post","ID","editPostHandler","postsContent","length","errorContent","Object","keys"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect, useCallback } from \"react\";\n\nimport AuthContext from \"../../store/auth-context\";\nimport Errors from \"../Errors/Errors\";\nimport PostForm from \"./PostForm\";\nimport PostsList from \"./PostsLists\";\n\nconst Posts = () => {\n  const authContext = useContext(AuthContext);\n  const [posts, setPosts] = useState([]);\n  const [errors, setErrors] = useState({});\n\n  const fetchPostsHandler = useCallback(async () => {\n    setErrors({});\n\n    try {\n      const response = await fetch('/api/posts',\n        {\n          headers: {\n            'Authorization': 'Bearer ' + authContext.token,\n          },\n        }\n      );\n      const data = await response.json();\n      if (!response.ok) {\n        let errorText = 'Fetching posts failed.';\n        if (!data.hasOwnProperty('error')) {\n          throw new Error(errorText);\n        }\n        if ((typeof data['error'] === 'string')) {\n          setErrors({ 'unknown': data['error'] })\n        } else {\n          setErrors(data['error']);\n        }\n      } else {\n        setPosts(data.data);\n      }\n    } catch (error) {\n      setErrors({ \"error\": error.message });\n    }\n  }, [authContext.token]);\n\n  useEffect(() => {\n    fetchPostsHandler();\n  }, [fetchPostsHandler]);\n\n  const addPostHandler = (postData) => {\n    setPosts((prevState) => { return [...prevState, postData] });\n  }\n\n  const deletePostHandler = (postID) => {\n    setPosts((prevState) => {\n      return prevState.filter(post => { return post.ID !== postID; })\n    })\n  }\n\n  const editPostHandler = () => {\n    fetchPostsHandler();\n  }\n\n  const postsContent = posts.length === 0 ?\n    <p>No posts yet</p>\n    :\n    <PostsList\n      posts={posts}\n      onEditPost={editPostHandler}\n      onDeletePost={deletePostHandler} />;\n\n  const errorContent = Object.keys(errors).length === 0 ? null : Errors(errors);\n\n  return (\n    <section>\n      <h1 className=\"pb-4\">My posts</h1>\n      <PostForm onAddPost={addPostHandler}/>\n      {errorContent}\n      {postsContent}\n    </section>\n  );\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}